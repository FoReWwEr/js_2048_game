{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.starting = false;\n        this.table = document.querySelector(\".game-field\");\n        this.score = 0;\n        this.block = false;\n    }\n    copyBoard(board) {\n        return board.map((bor)=>bor.slice());\n    }\n    boardsAreEqual(board1, board2) {\n        for(let i = 0; i < board1.length; i++)for(let j = 0; j < board1[i].length; j++){\n            if (board1[i][j] !== board2[i][j]) return false;\n        }\n        return true;\n    }\n    checkForLoss() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0) return false;\n            if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n            if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        return true;\n    }\n    moveLeft() {\n        if (this.starting && !this.block) {\n            const prevBoard = this.copyBoard(this.board);\n            this.board.forEach((row)=>{\n                const newRow = row.filter((item)=>item !== 0);\n                for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                    const newValue = newRow[i] *= 2;\n                    newRow[i] = newValue;\n                    newRow.splice(i + 1, 1);\n                    this.score += newValue;\n                }\n                while(newRow.length < row.length)newRow.push(0);\n                row.splice(0, row.length, ...newRow);\n            });\n            const check = this.boardsAreEqual(prevBoard, this.board);\n            if (!check) this.spawn();\n            this.updateTable();\n            this.getScore();\n            this.getState();\n        }\n    }\n    moveRight() {\n        if (this.starting && !this.block) {\n            const prevBoard = this.copyBoard(this.board);\n            this.board.forEach((row)=>{\n                const newRow = row.filter((value)=>value !== 0);\n                for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                    const newValue = newRow[i] *= 2;\n                    newRow[i] = newValue;\n                    newRow.splice(i - 1, 1);\n                    this.score += newValue;\n                }\n                while(newRow.length < row.length)newRow.unshift(0);\n                row.splice(0, row.length, ...newRow);\n            });\n            const check = this.boardsAreEqual(prevBoard, this.board);\n            if (!check) this.spawn();\n            this.updateTable();\n            this.getScore();\n            this.getState();\n        }\n    }\n    moveUp() {\n        if (this.starting && !this.block) {\n            const prevBoard = this.copyBoard(this.board);\n            for(let col = 0; col < 4; col++){\n                const newRow = [];\n                for(let row = 0; row < 4; row++){\n                    const value = this.board[row][col];\n                    if (value > 0) newRow.push(value);\n                }\n                for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                    const newValue = newRow[i] *= 2;\n                    newRow[i] = newValue;\n                    newRow.splice(i + 1, 1);\n                    this.score += newValue;\n                }\n                while(newRow.length < 4)newRow.push(0);\n                for(let row = 0; row < 4; row++)this.board[row][col] = newRow[row];\n            }\n            const check = this.boardsAreEqual(prevBoard, this.board);\n            if (!check) this.spawn();\n            this.updateTable();\n            this.getScore();\n            this.getState();\n        }\n    }\n    moveDown() {\n        if (this.starting && !this.block) {\n            const prevBoard = this.copyBoard(this.board);\n            for(let col = 0; col < 4; col++){\n                const newRow = [];\n                for(let row = 0; row < 4; row++){\n                    const value = this.board[row][col];\n                    if (value > 0) newRow.push(value);\n                }\n                for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                    const newValue = newRow[i] *= 2;\n                    newRow[i] = newValue;\n                    newRow.splice(i - 1, 1);\n                    this.score += newValue;\n                }\n                while(newRow.length < 4)newRow.unshift(0);\n                for(let row = 0; row < 4; row++)this.board[row][col] = newRow[row];\n            }\n            const check = this.boardsAreEqual(prevBoard, this.board);\n            if (!check) this.spawn();\n            this.updateTable();\n            this.getScore();\n            this.getState();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const setScore = document.querySelector(\".game-score\");\n        setScore.innerHTML = this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        this.board.forEach((row)=>{\n            row.forEach((column)=>{\n                if (column === 2048) {\n                    const message = document.querySelector(\".message-win\");\n                    message.classList.remove(\"hidden\");\n                    this.block = true;\n                }\n            });\n        });\n        if (this.checkForLoss()) {\n            const message = document.querySelector(\".message-lose\");\n            message.classList.remove(\"hidden\");\n            this.block = true;\n        } else {\n            const message = document.querySelector(\".message-lose\");\n            message.classList.add(\"hidden\");\n            this.block = false;\n        }\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.starting) {\n            const message = document.querySelector(\".message-start\");\n            const start = document.querySelector(\".button\");\n            message.style.visibility = \"hidden\";\n            start.textContent = \"Restart\";\n            start.classList.remove(\"start\");\n            start.classList.add(\"restart\");\n        } else {\n            const message = document.querySelector(\".message-start\");\n            const start = document.querySelector(\".button\");\n            message.style.visibility = \"visible\";\n            start.classList.remove(\"restart\");\n            start.classList.add(\"start\");\n            start.textContent = \"Start\";\n        }\n    }\n    random() {\n        const array = Array.from({\n            length: 16\n        }, (_, i)=>i);\n        const shuffled = array.sort(()=>0.5 - Math.random());\n        return shuffled.slice(0, 2);\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (!this.starting) {\n            const randomNumbers = this.random();\n            this.board.map((item, index)=>{\n                item.map((item2, index2)=>{\n                    const currentIndex = index * 4 + index2;\n                    if (randomNumbers.includes(currentIndex)) this.board[index][index2] = Math.random() > 0.1 ? 2 : 4;\n                });\n            });\n            this.starting = true;\n            this.updateTable();\n            this.getStatus();\n        } else this.restart();\n    }\n    updateTable() {\n        const rows = document.querySelectorAll(\".field-row\");\n        this.board.forEach((row, rowIndex)=>{\n            if (rows[rowIndex]) row.forEach((cell, colIndex)=>{\n                const cellElement = rows[rowIndex].children[colIndex];\n                if (cellElement && cell > 0) {\n                    cellElement.textContent = cell;\n                    for(let i = 1; i < 2048; i *= 2)cellElement.classList.remove(`field-cell--${i}`);\n                    cellElement.classList.add(`field-cell`, `field-cell--${cell}`);\n                } else {\n                    cellElement.textContent = \"\";\n                    for(let i = 1; i <= 2048; i *= 2)cellElement.classList.remove(`field-cell--${i}`);\n                }\n            });\n        });\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const rows = document.querySelectorAll(\".field-row\");\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.starting = false;\n        this.getStatus();\n        this.score = 0;\n        this.getScore();\n        this.getState();\n        this.board.forEach((row, index)=>{\n            row.forEach((cell, index2)=>{\n                const cellElement = rows[index].children[index2];\n                cellElement.innerHTML = \"\";\n                for(let i = 1; i <= 2048; i *= 2)cellElement.classList.remove(`field-cell--${i}`);\n            });\n        });\n        const message = document.querySelector(\".message-win\");\n        message.classList.add(\"hidden\");\n        this.block = false;\n    }\n    spawn() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                if (cell === 0) emptyCells.push({\n                    rowIndex: rowIndex,\n                    cellIndex: cellIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { rowIndex: rowIndex, cellIndex: cellIndex } = emptyCells[randomIndex];\n            this.board[rowIndex][cellIndex] = Math.random() > 0.1 ? 2 : 4;\n            this.updateTable();\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$start = document.querySelector(\".start\");\n$09e991522ca7e64e$var$start.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n    }\n}); // Write your code here\n\n\n//# sourceMappingURL=index.2824478b.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst start = document.querySelector('.start');\n\nstart.addEventListener('click', () => {\n  game.start();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowRight': game.moveRight(); break;\n    case 'ArrowLeft': game.moveLeft(); break;\n    case 'ArrowDown': game.moveDown(); break;\n    case 'ArrowUp': game.moveUp(); break;\n  }\n});\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState\n      || [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]];\n\n    this.starting = false;\n    this.table = document.querySelector('.game-field');\n    this.score = 0;\n    this.block = false;\n  }\n\n  copyBoard(board) {\n    return board.map((bor) => bor.slice());\n  }\n\n  boardsAreEqual(board1, board2) {\n    for (let i = 0; i < board1.length; i++) {\n      for (let j = 0; j < board1[i].length; j++) {\n        if (board1[i][j] !== board2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkForLoss() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  moveLeft() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      this.board.forEach((row) => {\n        const newRow = row.filter(item => item !== 0);\n\n        for (let i = 0; i < newRow.length; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i + 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < row.length) {\n          newRow.push(0);\n        }\n\n        row.splice(0, row.length, ...newRow);\n      });\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  moveRight() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      this.board.forEach((row) => {\n        const newRow = row.filter(value => value !== 0);\n\n        for (let i = newRow.length - 1; i > 0; i--) {\n          if (newRow[i] === newRow[i - 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i - 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < row.length) {\n          newRow.unshift(0);\n        }\n\n        row.splice(0, row.length, ...newRow);\n      });\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  moveUp() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      for (let col = 0; col < 4; col++) {\n        const newRow = [];\n\n        for (let row = 0; row < 4; row++) {\n          const value = this.board[row][col];\n\n          if (value > 0) {\n            newRow.push(value);\n          }\n        }\n\n        for (let i = 0; i < newRow.length; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i + 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = newRow[row];\n        }\n      }\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  moveDown() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      for (let col = 0; col < 4; col++) {\n        const newRow = [];\n\n        for (let row = 0; row < 4; row++) {\n          const value = this.board[row][col];\n\n          if (value > 0) {\n            newRow.push(value);\n          }\n        }\n\n        for (let i = newRow.length - 1; i > 0; i--) {\n          if (newRow[i] === newRow[i - 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i - 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < 4) {\n          newRow.unshift(0);\n        }\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = newRow[row];\n        }\n      }\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const setScore = document.querySelector('.game-score');\n\n    setScore.innerHTML = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    this.board.forEach((row) => {\n      row.forEach((column) => {\n        if (column === 2048) {\n          const message = document.querySelector('.message-win');\n\n          message.classList.remove('hidden');\n          this.block = true;\n        }\n      });\n    });\n\n    if (this.checkForLoss()) {\n      const message = document.querySelector('.message-lose');\n\n      message.classList.remove('hidden');\n      this.block = true;\n    } else {\n      const message = document.querySelector('.message-lose');\n\n      message.classList.add('hidden');\n      this.block = false;\n    }\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.starting) {\n      const message = document.querySelector('.message-start');\n      const start = document.querySelector('.button');\n\n      message.style.visibility = 'hidden';\n      start.textContent = 'Restart';\n      start.classList.remove('start');\n      start.classList.add('restart');\n    } else {\n      const message = document.querySelector('.message-start');\n      const start = document.querySelector('.button');\n\n      message.style.visibility = 'visible';\n      start.classList.remove('restart');\n      start.classList.add('start');\n      start.textContent = 'Start';\n    }\n  }\n\n  random() {\n    const array = Array.from({ length: 16 }, (_, i) => i);\n    const shuffled = array.sort(() => 0.5 - Math.random());\n\n    return shuffled.slice(0, 2);\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (!this.starting) {\n      const randomNumbers = this.random();\n\n      this.board.map((item, index) => {\n        item.map((item2, index2) => {\n          const currentIndex = index * 4 + index2;\n\n          if (randomNumbers.includes(currentIndex)) {\n            this.board[index][index2] = Math.random() > 0.1 ? 2 : 4;\n          }\n        });\n      });\n\n      this.starting = true;\n      this.updateTable();\n      this.getStatus();\n    } else {\n      this.restart();\n    }\n  }\n\n  updateTable() {\n    const rows = document.querySelectorAll('.field-row');\n\n    this.board.forEach((row, rowIndex) => {\n      if (rows[rowIndex]) {\n        row.forEach((cell, colIndex) => {\n          const cellElement = rows[rowIndex].children[colIndex];\n\n          if (cellElement && cell > 0) {\n            cellElement.textContent = cell;\n\n            for (let i = 1; i < 2048; i *= 2) {\n              cellElement.classList.remove(`field-cell--${i}`);\n            }\n            cellElement.classList.add(`field-cell`, `field-cell--${cell}`);\n          } else {\n            cellElement.textContent = '';\n\n            for (let i = 1; i <= 2048; i *= 2) {\n              cellElement.classList.remove(`field-cell--${i}`);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const rows = document.querySelectorAll('.field-row');\n\n    this.board\n      = [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]];\n\n    this.starting = false;\n    this.getStatus();\n    this.score = 0;\n    this.getScore();\n    this.getState();\n\n    this.board.forEach((row, index) => {\n      row.forEach((cell, index2) => {\n        const cellElement = rows[index].children[index2];\n\n        cellElement.innerHTML = '';\n\n        for (let i = 1; i <= 2048; i *= 2) {\n          cellElement.classList.remove(`field-cell--${i}`);\n        }\n      });\n    });\n\n    const message = document.querySelector('.message-win');\n\n    message.classList.add('hidden');\n    this.block = false;\n  }\n\n  spawn() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          emptyCells.push({\n            rowIndex, cellIndex,\n          });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, cellIndex } = emptyCells[randomIndex];\n\n      this.board[rowIndex][cellIndex] = Math.random() > 0.1 ? 2 : 4;\n\n      this.updateTable();\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","starting","table","document","querySelector","score","block","copyBoard","map","bor","slice","boardsAreEqual","board1","board2","i","length","j","checkForLoss","row","col","moveLeft","prevBoard","forEach","newRow","filter","item","newValue","splice","push","spawn","updateTable","getScore","getState","moveRight","value","unshift","moveUp","moveDown","setScore","innerHTML","column","message","classList","remove","add","getStatus","start","style","visibility","textContent","random","shuffled","array","Array","from","_","sort","Math","restart","randomNumbers","index","item2","index2","includes","rows","querySelectorAll","rowIndex","cell","colIndex","cellElement","children","emptyCells","cellIndex","randomIndex","floor","$09e991522ca7e64e$var$start","addEventListener","e","key"],"version":3,"file":"index.2824478b.js.map"}