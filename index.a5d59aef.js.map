{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.starting = false;\n        this.table = document.querySelector(\".game-field\");\n        this.score = 0;\n        this.block = false;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"copyBoard\",\n            value: function copyBoard(board) {\n                return board.map(function(bor) {\n                    return bor.slice();\n                });\n            }\n        },\n        {\n            key: \"boardsAreEqual\",\n            value: function boardsAreEqual(board1, board2) {\n                for(var i = 0; i < board1.length; i++)for(var j = 0; j < board1[i].length; j++){\n                    if (board1[i][j] !== board2[i][j]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"checkForLoss\",\n            value: function checkForLoss() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 0) return false;\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n                    if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                if (this.starting && !this.block) {\n                    var prevBoard = this.copyBoard(this.board);\n                    this.board.forEach(function(row) {\n                        var _row;\n                        var newRow = row.filter(function(item) {\n                            return item !== 0;\n                        });\n                        for(var i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                            var newValue = newRow[i] *= 2;\n                            newRow[i] = newValue;\n                            newRow.splice(i + 1, 1);\n                            _this.score += newValue;\n                        }\n                        while(newRow.length < row.length)newRow.push(0);\n                        (_row = row).splice.apply(_row, [\n                            0,\n                            row.length\n                        ].concat((0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(newRow)));\n                    });\n                    var check = this.boardsAreEqual(prevBoard, this.board);\n                    if (!check) this.spawn();\n                    this.updateTable();\n                    this.getScore();\n                    this.getState();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (this.starting && !this.block) {\n                    var prevBoard = this.copyBoard(this.board);\n                    this.board.forEach(function(row) {\n                        var _row;\n                        var newRow = row.filter(function(value) {\n                            return value !== 0;\n                        });\n                        for(var i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                            var newValue = newRow[i] *= 2;\n                            newRow[i] = newValue;\n                            newRow.splice(i - 1, 1);\n                            _this.score += newValue;\n                        }\n                        while(newRow.length < row.length)newRow.unshift(0);\n                        (_row = row).splice.apply(_row, [\n                            0,\n                            row.length\n                        ].concat((0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(newRow)));\n                    });\n                    var check = this.boardsAreEqual(prevBoard, this.board);\n                    if (!check) this.spawn();\n                    this.updateTable();\n                    this.getScore();\n                    this.getState();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.starting && !this.block) {\n                    var prevBoard = this.copyBoard(this.board);\n                    for(var col = 0; col < 4; col++){\n                        var newRow = [];\n                        for(var row = 0; row < 4; row++){\n                            var value = this.board[row][col];\n                            if (value > 0) newRow.push(value);\n                        }\n                        for(var i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                            var newValue = newRow[i] *= 2;\n                            newRow[i] = newValue;\n                            newRow.splice(i + 1, 1);\n                            this.score += newValue;\n                        }\n                        while(newRow.length < 4)newRow.push(0);\n                        for(var row1 = 0; row1 < 4; row1++)this.board[row1][col] = newRow[row1];\n                    }\n                    var check = this.boardsAreEqual(prevBoard, this.board);\n                    if (!check) this.spawn();\n                    this.updateTable();\n                    this.getScore();\n                    this.getState();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.starting && !this.block) {\n                    var prevBoard = this.copyBoard(this.board);\n                    for(var col = 0; col < 4; col++){\n                        var newRow = [];\n                        for(var row = 0; row < 4; row++){\n                            var value = this.board[row][col];\n                            if (value > 0) newRow.push(value);\n                        }\n                        for(var i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                            var newValue = newRow[i] *= 2;\n                            newRow[i] = newValue;\n                            newRow.splice(i - 1, 1);\n                            this.score += newValue;\n                        }\n                        while(newRow.length < 4)newRow.unshift(0);\n                        for(var row1 = 0; row1 < 4; row1++)this.board[row1][col] = newRow[row1];\n                    }\n                    var check = this.boardsAreEqual(prevBoard, this.board);\n                    if (!check) this.spawn();\n                    this.updateTable();\n                    this.getScore();\n                    this.getState();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var setScore = document.querySelector(\".game-score\");\n                setScore.innerHTML = this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                var _this = this;\n                this.board.forEach(function(row) {\n                    row.forEach(function(column) {\n                        if (column === 2048) {\n                            var message = document.querySelector(\".message-win\");\n                            message.classList.remove(\"hidden\");\n                            _this.block = true;\n                        }\n                    });\n                });\n                if (this.checkForLoss()) {\n                    var message = document.querySelector(\".message-lose\");\n                    message.classList.remove(\"hidden\");\n                    this.block = true;\n                } else {\n                    var message1 = document.querySelector(\".message-lose\");\n                    message1.classList.add(\"hidden\");\n                    this.block = false;\n                }\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.starting) {\n                    var message = document.querySelector(\".message-start\");\n                    var start = document.querySelector(\".button\");\n                    message.style.visibility = \"hidden\";\n                    start.textContent = \"Restart\";\n                    start.classList.remove(\"start\");\n                    start.classList.add(\"restart\");\n                } else {\n                    var message1 = document.querySelector(\".message-start\");\n                    var start1 = document.querySelector(\".button\");\n                    message1.style.visibility = \"visible\";\n                    start1.classList.remove(\"restart\");\n                    start1.classList.add(\"start\");\n                    start1.textContent = \"Start\";\n                }\n            }\n        },\n        {\n            key: \"random\",\n            value: function random() {\n                var array = Array.from({\n                    length: 16\n                }, function(_, i) {\n                    return i;\n                });\n                var shuffled = array.sort(function() {\n                    return 0.5 - Math.random();\n                });\n                return shuffled.slice(0, 2);\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                var _this = this;\n                if (!this.starting) {\n                    var randomNumbers = this.random();\n                    this.board.map(function(item, index) {\n                        item.map(function(item2, index2) {\n                            var currentIndex = index * 4 + index2;\n                            if (randomNumbers.includes(currentIndex)) _this.board[index][index2] = Math.random() > 0.1 ? 2 : 4;\n                        });\n                    });\n                    this.starting = true;\n                    this.updateTable();\n                    this.getStatus();\n                } else this.restart();\n            }\n        },\n        {\n            key: \"updateTable\",\n            value: function updateTable() {\n                var rows = document.querySelectorAll(\".field-row\");\n                this.board.forEach(function(row, rowIndex) {\n                    if (rows[rowIndex]) row.forEach(function(cell, colIndex) {\n                        var cellElement = rows[rowIndex].children[colIndex];\n                        if (cellElement && cell > 0) {\n                            cellElement.textContent = cell;\n                            for(var i = 1; i < 2048; i *= 2)cellElement.classList.remove(\"field-cell--\".concat(i));\n                            cellElement.classList.add(\"field-cell\", \"field-cell--\".concat(cell));\n                        } else {\n                            cellElement.textContent = \"\";\n                            for(var i1 = 1; i1 <= 2048; i1 *= 2)cellElement.classList.remove(\"field-cell--\".concat(i1));\n                        }\n                    });\n                });\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var rows = document.querySelectorAll(\".field-row\");\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.starting = false;\n                this.getStatus();\n                this.score = 0;\n                this.getScore();\n                this.getState();\n                this.board.forEach(function(row, index) {\n                    row.forEach(function(cell, index2) {\n                        var cellElement = rows[index].children[index2];\n                        cellElement.innerHTML = \"\";\n                        for(var i = 1; i <= 2048; i *= 2)cellElement.classList.remove(\"field-cell--\".concat(i));\n                    });\n                });\n                var message = document.querySelector(\".message-win\");\n                message.classList.add(\"hidden\");\n                this.block = false;\n            }\n        },\n        {\n            key: \"spawn\",\n            value: function spawn() {\n                var emptyCells = [];\n                this.board.forEach(function(row, rowIndex) {\n                    row.forEach(function(cell, cellIndex) {\n                        if (cell === 0) emptyCells.push({\n                            rowIndex: rowIndex,\n                            cellIndex: cellIndex\n                        });\n                    });\n                });\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], rowIndex = _emptyCells_randomIndex.rowIndex, cellIndex = _emptyCells_randomIndex.cellIndex;\n                    this.board[rowIndex][cellIndex] = Math.random() > 0.1 ? 2 : 4;\n                    this.updateTable();\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$start = document.querySelector(\".start\");\n$197cd56b15c33885$var$start.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n    }\n}); // Write your code here\n\n})();\n//# sourceMappingURL=index.a5d59aef.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst start = document.querySelector('.start');\n\nstart.addEventListener('click', () => {\n  game.start();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowRight': game.moveRight(); break;\n    case 'ArrowLeft': game.moveLeft(); break;\n    case 'ArrowDown': game.moveDown(); break;\n    case 'ArrowUp': game.moveUp(); break;\n  }\n});\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState\n      || [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]];\n\n    this.starting = false;\n    this.table = document.querySelector('.game-field');\n    this.score = 0;\n    this.block = false;\n  }\n\n  copyBoard(board) {\n    return board.map((bor) => bor.slice());\n  }\n\n  boardsAreEqual(board1, board2) {\n    for (let i = 0; i < board1.length; i++) {\n      for (let j = 0; j < board1[i].length; j++) {\n        if (board1[i][j] !== board2[i][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkForLoss() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  moveLeft() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      this.board.forEach((row) => {\n        const newRow = row.filter(item => item !== 0);\n\n        for (let i = 0; i < newRow.length; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i + 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < row.length) {\n          newRow.push(0);\n        }\n\n        row.splice(0, row.length, ...newRow);\n      });\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  moveRight() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      this.board.forEach((row) => {\n        const newRow = row.filter(value => value !== 0);\n\n        for (let i = newRow.length - 1; i > 0; i--) {\n          if (newRow[i] === newRow[i - 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i - 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < row.length) {\n          newRow.unshift(0);\n        }\n\n        row.splice(0, row.length, ...newRow);\n      });\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  moveUp() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      for (let col = 0; col < 4; col++) {\n        const newRow = [];\n\n        for (let row = 0; row < 4; row++) {\n          const value = this.board[row][col];\n\n          if (value > 0) {\n            newRow.push(value);\n          }\n        }\n\n        for (let i = 0; i < newRow.length; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i + 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = newRow[row];\n        }\n      }\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  moveDown() {\n    if (this.starting && !this.block) {\n      const prevBoard = this.copyBoard(this.board);\n\n      for (let col = 0; col < 4; col++) {\n        const newRow = [];\n\n        for (let row = 0; row < 4; row++) {\n          const value = this.board[row][col];\n\n          if (value > 0) {\n            newRow.push(value);\n          }\n        }\n\n        for (let i = newRow.length - 1; i > 0; i--) {\n          if (newRow[i] === newRow[i - 1]) {\n            const newValue = newRow[i] *= 2;\n\n            newRow[i] = newValue;\n            newRow.splice(i - 1, 1);\n\n            this.score += newValue;\n          }\n        }\n\n        while (newRow.length < 4) {\n          newRow.unshift(0);\n        }\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = newRow[row];\n        }\n      }\n\n      const check = this.boardsAreEqual(prevBoard, this.board);\n\n      if (!check) {\n        this.spawn();\n      }\n\n      this.updateTable();\n      this.getScore();\n      this.getState();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const setScore = document.querySelector('.game-score');\n\n    setScore.innerHTML = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    this.board.forEach((row) => {\n      row.forEach((column) => {\n        if (column === 2048) {\n          const message = document.querySelector('.message-win');\n\n          message.classList.remove('hidden');\n          this.block = true;\n        }\n      });\n    });\n\n    if (this.checkForLoss()) {\n      const message = document.querySelector('.message-lose');\n\n      message.classList.remove('hidden');\n      this.block = true;\n    } else {\n      const message = document.querySelector('.message-lose');\n\n      message.classList.add('hidden');\n      this.block = false;\n    }\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.starting) {\n      const message = document.querySelector('.message-start');\n      const start = document.querySelector('.button');\n\n      message.style.visibility = 'hidden';\n      start.textContent = 'Restart';\n      start.classList.remove('start');\n      start.classList.add('restart');\n    } else {\n      const message = document.querySelector('.message-start');\n      const start = document.querySelector('.button');\n\n      message.style.visibility = 'visible';\n      start.classList.remove('restart');\n      start.classList.add('start');\n      start.textContent = 'Start';\n    }\n  }\n\n  random() {\n    const array = Array.from({ length: 16 }, (_, i) => i);\n    const shuffled = array.sort(() => 0.5 - Math.random());\n\n    return shuffled.slice(0, 2);\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (!this.starting) {\n      const randomNumbers = this.random();\n\n      this.board.map((item, index) => {\n        item.map((item2, index2) => {\n          const currentIndex = index * 4 + index2;\n\n          if (randomNumbers.includes(currentIndex)) {\n            this.board[index][index2] = Math.random() > 0.1 ? 2 : 4;\n          }\n        });\n      });\n\n      this.starting = true;\n      this.updateTable();\n      this.getStatus();\n    } else {\n      this.restart();\n    }\n  }\n\n  updateTable() {\n    const rows = document.querySelectorAll('.field-row');\n\n    this.board.forEach((row, rowIndex) => {\n      if (rows[rowIndex]) {\n        row.forEach((cell, colIndex) => {\n          const cellElement = rows[rowIndex].children[colIndex];\n\n          if (cellElement && cell > 0) {\n            cellElement.textContent = cell;\n\n            for (let i = 1; i < 2048; i *= 2) {\n              cellElement.classList.remove(`field-cell--${i}`);\n            }\n            cellElement.classList.add(`field-cell`, `field-cell--${cell}`);\n          } else {\n            cellElement.textContent = '';\n\n            for (let i = 1; i <= 2048; i *= 2) {\n              cellElement.classList.remove(`field-cell--${i}`);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const rows = document.querySelectorAll('.field-row');\n\n    this.board\n      = [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]];\n\n    this.starting = false;\n    this.getStatus();\n    this.score = 0;\n    this.getScore();\n    this.getState();\n\n    this.board.forEach((row, index) => {\n      row.forEach((cell, index2) => {\n        const cellElement = rows[index].children[index2];\n\n        cellElement.innerHTML = '';\n\n        for (let i = 1; i <= 2048; i *= 2) {\n          cellElement.classList.remove(`field-cell--${i}`);\n        }\n      });\n    });\n\n    const message = document.querySelector('.message-win');\n\n    message.classList.add('hidden');\n    this.block = false;\n  }\n\n  spawn() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          emptyCells.push({\n            rowIndex, cellIndex,\n          });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { rowIndex, cellIndex } = emptyCells[randomIndex];\n\n      this.board[rowIndex][cellIndex] = Math.random() > 0.1 ? 2 : 4;\n\n      this.updateTable();\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","board","starting","table","document","querySelector","score","block","key","value","map","bor","board1","board2","j","row","col","_this","prevBoard","copyBoard","forEach","newRow","filter","item","newValue","splice","push","apply","concat","boardsAreEqual","spawn","updateTable","getScore","getState","unshift","row1","setScore","innerHTML","column","message","classList","remove","checkForLoss","message1","add","start","style","visibility","textContent","start1","shuffled","array","_","sort","Math","random","restart","randomNumbers","index","item2","index2","includes","getStatus","rows","querySelectorAll","rowIndex","cell","colIndex","cellElement","children","i1","emptyCells","cellIndex","randomIndex","floor","_emptyCells_randomIndex","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$start","addEventListener","e","moveRight","moveLeft","moveDown","moveUp"],"version":3,"file":"index.a5d59aef.js.map"}